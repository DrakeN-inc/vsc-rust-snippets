{    
    "fn": {
        "scope": "rust",
        "prefix": "fn ",
        "body": [
            "fn $1($2) {",
            "    $3",
            "}"
        ],
        "description": "fn name(_) {}"
    },


    "fn-return": {
        "scope": "rust",
        "prefix": "fn >",
        "body": [
            "fn $1($3) -> $2 {",
            "    $4",
            "}"
        ],
        "description": "fn name(_) {}"
    },


    "fn-return-result": {
        "scope": "rust",
        "prefix": "fn > Result",
        "body": [
            "fn $1($3) -> Result<$2> {",
            "    $4",
            "}"
        ],
        "description": "fn name(_) -> Result<T,E> {}"
    },


    "fn-return-option": {
        "scope": "rust",
        "prefix": "fn > Option",
        "body": [
            "fn $1($3) -> Option<$2> {",
            "    $4",
            "}"
        ],
        "description": "fn name(_) -> Option<T> {}"
    },


    "fn-main": {
        "scope": "rust",
        "prefix": "fn main",
        "body": [
            "fn main() -> ${1:std::io::Result<()>} {",
            "    ${2:println!(\"Hello, world!\");}",
            "",
            "    Ok(())",
            "}"
        ],
        "description": "fn main() -> std::io::Result<()> { Ok(()) }"
    },


    "async-fn-main": {
        "scope": "rust",
        "prefix": "async fn main",
        "body": [
            "#[${1|tokio,async_std,actix_web|}::main]",
            "async fn main() -> ${2:std::io::Result<()>} {",
            "    ${3:println!(\"Hello, world!\");}",
            "",
            "    Ok(())",
            "}"
        ],
        "description": "async fn main() -> std::io::Result<()> { Ok(()) }"
    },


    "fn-test": {
        "scope": "rust",
        "prefix": "fn test",
        "body": [
            "#[test]",
            "fn ${1:test}() -> ${2:std::io::Result<()>} {",
            "    assert_eq!(${3:2+5, 7});",
            "",
            "    Ok(())",
            "}"
        ],
        "description": "fn test() -> std::io::Result<()> { Ok(()) }"
    },


    "async-fn-test": {
        "scope": "rust",
        "prefix": "async fn test",
        "body": [
            "use futures::executor::block_on;",
            "",
            "#[test]",
            "fn ${1:test}() -> ${2:std::io::Result<()>} {",
            "    block_on( async {",
            "        assert_eq!(${3:2+5, 7});",
            "        ",
            "        Ok(())",
            "    })?",
            "}"
        ],
        "description": "fn test() -> std::io::Result<()> { Ok(()) }"
    },


    "fn-new": {
        "scope": "rust",
        "prefix": "pub fn new",
        "body": [
            "pub fn new($1) -> Self {",
            "    Self {",
            "        $2",
            "    }",
            "}"
        ],
        "description": "pub fn new(_) -> Self {}"
    },


    "fn-get": {
        "scope": "rust",
        "prefix": "pub fn get_",
        "body": [
            "pub fn get_$1(&self) -> $2 {",
            "    &self.$1",
            "}"
        ],
        "description": "pub fn get_(&self) -> ... {}"
    },


    "fn-set": {
        "scope": "rust",
        "prefix": "pub fn set_",
        "body": [
            "pub fn set_$1(&mut self, val: $2) {",
            "    self.$1 = val$2;",
            "}"
        ],
        "description": "pub fn set_(&mut self, val: ...) {}"
    },


    "fn-builder": {
        "scope": "rust",
        "prefix": "pub fn builder",
        "body": [
            "pub fn builder() -> $1Builder {",
            "    $1Builder {",
            "        $2",
            "    }",
            "}"
        ],
        "description": "pub fn builder() -> ... {}"
    },


    "fn-build": {
        "scope": "rust",
        "prefix": "pub fn build",
        "body": [
            "pub fn build(self) -> $1 {",
            "    $1 {",
            "        $2",
            "    }",
            "}"
        ],
        "description": "pub fn build(self) -> ... {}"
    },


    "fn-take": {
        "scope": "rust",
        "prefix": "pub fn take",
        "body": [
            "pub fn take(self) -> $1 {",
            "    $2",
            "}"
        ],
        "description": "pub fn take(self) -> ... {}"
    },
    
    
	"trait": {
        "scope": "rust",
        "prefix": "trait ",
        "body": [
            "trait $1 {",
            "    $2",
            "}"
        ],
        "description": "trait Name {}"
    },


    "impl": {
        "scope": "rust",
        "prefix": "impl ",
        "body": [
            "impl $1 {",
            "    $2",
            "}"
        ],
        "description": "impl Name {}"
    },


    "impl-display": {
        "scope": "rust",
        "prefix": "impl Display",
        "body": [
            "use std::fmt;",
            "",
            "impl Display for $1 {",
            "    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
            "        write!(f, \"$2\", $3)",
            "    }",
            "}"
        ],
        "description": "impl Display for Name {}"
    },


    "impl-from_str": {
        "scope": "rust",
        "prefix": "impl FromStr",
        "body": [
            "use std::str::FromStr;",
            "",
            "impl FromStr for $1 {",
            "    type Err = ${2:Error};",
            "",
            "    fn parse(s: &str) -> std::result::Result<Self, Self::Err> {",
            "        $3",
            "    }",
            "}"
        ],
        "description": "impl FromStr for Name {}"
    },

    
    "struct": {
        "scope": "rust",
        "prefix": "struct ",
        "body": [
            "struct $1 {",
            "    $2",
            "}"
        ],
        "description": "struct Name {}"
    },


    "struct-impl": {
        "scope": "rust",
        "prefix": "struct impl ",
        "body": [
            "struct $1 {",
            "    $2",
            "}",
            "",
            "impl $1 {",
            "    $3",
            "}"
        ],
        "description": "struct Name {}  impl Name {}"
    },


    "struct-builder": {
        "scope": "rust",
        "prefix": "struct Builder",
        "body": [
            "struct $1Builder {",
            "    $2",
            "}",
            "",
            "impl $1Builder {",
            "    /// Creates a new $1 builder",
            "    pub fn new($3) -> Self {",
            "        Self {",
            "            $4",
            "        }",
            "    }",
            "",
            "    /// Build the $1 object",
            "    pub fn build(self) -> $1 {",
            "        $1 {",
            "            $5",
            "        }",
            "    }",
            "",
            "    $6",
            "}"
        ],
        "description": "struct NameBuilder {}  impl NameBuilder {}"
    },


    "enum": {
        "scope": "rust",
        "prefix": "enum ",
        "body": [
            "enum $1 {",
            "    $2",
            "}"
        ],
        "description": "enum Name {}"
    },


    "enum-impl": {
        "scope": "rust",
        "prefix": "enum impl ",
        "body": [
            "enum $1 {",
            "    $2",
            "}",
            "",
            "impl $1 {",
            "    $3",
            "}"
        ],
        "description": "enum Name {}  impl Name {}"
    },


    "enum-builder": {
        "scope": "rust",
        "prefix": "enum Builder",
        "body": [
            "enum $1Builder {",
            "    $2",
            "}",
            "",
            "impl $1Builder {",
            "    /// Creates a new $1 builder",
            "    pub fn new($3) -> Self {",
            "        Self {",
            "            $4",
            "        }",
            "    }",
            "",
            "    /// Build the $1 object",
            "    pub fn build(self) -> $1 {",
            "        $1::$5",
            "    }",
            "",
            "    $6",
            "}"
        ],
        "description": "struct NameBuilder {}  impl NameBuilder {}"
    },


    "enum-error": {
        "scope": "rust",
        "prefix": "enum Error",
        "body": [
            "use add_macro::Error;",
            "",
            "#[derive(Error)]",
            "enum Error {",
            "    #[error(\"${2:Something went wrong... =/}\")]",
            "    ${1:Error},",
            "}",
        ],
        "description": "enum Error {}"
    },


    "new-self": {
        "scope": "rust",
        "prefix": "Self {",
        "body": [
            "Self {",
            "    $1,",
            "}",
        ],
        "description": "Self {}"
    }
}
