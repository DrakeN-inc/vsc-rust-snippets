{
    "block-mod": {
        "scope": "rust",
        "prefix": "mod {",
        "body": [
            "mod {",
            "    $1",
            "}"
        ],
        "description": "mod {}"
    },

    
    "block-async": {
        "scope": "rust",
        "prefix": "async {",
        "body": [
            "async {",
            "    $1",
            "}"
        ],
        "description": "async {}"
    },

    "block-async-block_on": {
        "scope": "rust",
        "prefix": "async { block_on }",
        "body": [
            "use futures::executor::block_on;",
            "",
            "block_on( async {",
            "    $1",
            "});"
        ],
        "description": "block_on( async {} );"
    },

    "block-unsafe": {
        "scope": "rust",
        "prefix": "unsafe {",
        "body": [
            "unsafe {",
            "    $1",
            "}"
        ],
        "description": "unsafe {}"
    },
    
    
    "block-if": {
        "scope": "rust",
        "prefix": "if ",
        "body": [
            "if $1 {",
            "    $2",
            "}"
        ],
        "description": "if ... {}"
    },

    "block-if-else": {
        "scope": "rust",
        "prefix": "if else ",
        "body": [
            "if $1 {",
            "    $2",
            "} else {",
            "    $3",
            "}"
        ],
        "description": "if ... {} else {}"
    },

    "block-if-else-if": {
        "scope": "rust",
        "prefix": "if else if ",
        "body": [
            "if $1 {",
            "    $3",
            "} else if $2 {",
            "    $4",
            "} else {",
            "    $5",
            "}"
        ],
        "description": "if ... {} else {}"
    },

    "block-short-if-else": {
        "scope": "rust",
        "prefix": "if?",
        "body": [
            "if $1 { $2 }else{ $3 }",
        ],
        "description": "if ... { }else{ }"
    },

    "block-if-let": {
        "scope": "rust",
        "prefix": "if let ",
        "body": [
            "if let $1 = $2 {",
            "    $3",
            "}"
        ],
        "description": "if let ... = ... {}"
    },

    "alias-if-let-result-ok": {
        "scope": "rust",
        "prefix": "if let Ok",
        "body": [
            "if let Ok($1) = $2 {",
            "    $3",
            "}"
        ],
        "description": "if let Ok(...) = ... {}"
    },

    "alias-if-let-result-err": {
        "scope": "rust",
        "prefix": "if let Err",
        "body": [
            "if let Err($1) = $2 {",
            "    $3",
            "}"
        ],
        "description": "if let Err(...) = ... {}"
    },

    "alias-if-let-option-some": {
        "scope": "rust",
        "prefix": "if let Some",
        "body": [
            "if let Some($1) = $2 {",
            "    $3",
            "}"
        ],
        "description": "if let Some(...) = ... {}"
    },

    "alias-if-let-option-none": {
        "scope": "rust",
        "prefix": "if let None",
        "body": [
            "if let None = $1 {",
            "    $2",
            "}"
        ],
        "description": "if let None = ... {}"
    },

    "block-match": {
        "scope": "rust",
        "prefix": "match ",
        "body": [
            "match $1 {",
            "    $2 => $3,",
            "}"
        ],
        "description": "match ... { ... => ..., }"
    },

    "alias-match-result": {
        "scope": "rust",
        "prefix": "match Result",
        "body": [
            "match $1 {",
            "    Ok(v) => $2,",
            "    Err(e) => $3",
            "}"
        ],
        "description": "match ... { Ok(v) =>, Err(e) => }"
    },

    "alias-match-option": {
        "scope": "rust",
        "prefix": "match Option",
        "body": [
            "match $1 {",
            "    Some(v) => $2,",
            "    None => $3",
            "}"
        ],
        "description": "match ... { Some(v) =>, None => }"
    },
    

    "block-for": {
        "scope": "rust",
        "prefix": "for ",
        "body": [
            "for $1 in $2 {",
            "    $3",
            "}"
        ],
        "description": "for ... in ... {}"
    },

    "block-for-index": {
        "scope": "rust",
        "prefix": "for i ",
        "body": [
            "for i in 0..${1:.len()} {",
            "    $2",
            "}"
        ],
        "description": "for i in 0..n {}"
    },

    "block-for-key-value": {
        "scope": "rust",
        "prefix": "for k, v",
        "body": [
            "for (k, v) in ${1:.enumerate()} {",
            "    $2",
            "}"
        ],
        "description": "for (k, v) in ... {}"
    },

    "block-while": {
        "scope": "rust",
        "prefix": "while ",
        "body": [
            "while $1 {",
            "    $2",
            "}"
        ],
        "description": "while ... {}"
    },

    "block-while-let": {
        "scope": "rust",
        "prefix": "while let ",
        "body": [
            "while let $1 = $2 {",
            "    $3",
            "}"
        ],
        "description": "while let ... = ... {}"
    },

    "alias-while-let-result-ok": {
        "scope": "rust",
        "prefix": "while let Ok",
        "body": [
            "while let Ok($1) = $2 {",
            "    $3",
            "}"
        ],
        "description": "while let Ok(...) = ... {}"
    },

    "alias-while-let-result-err": {
        "scope": "rust",
        "prefix": "while let Err",
        "body": [
            "while let Err($1) = $2 {",
            "    $3",
            "}"
        ],
        "description": "while let Err(...) = ... {}"
    },

    
    "alias-while-let-option-some": {
        "scope": "rust",
        "prefix": "while let Some",
        "body": [
            "while let Some($1) = $2 {",
            "    $3",
            "}"
        ],
        "description": "while let Some(...) = ... {}"
    },

    "alias-while-let-option-none": {
        "scope": "rust",
        "prefix": "while let None",
        "body": [
            "while let None = $1 {",
            "    $2",
            "}"
        ],
        "description": "while let None = ... {}"
    },

    "block-loop": {
        "scope": "rust",
        "prefix": "loop {",
        "body": [
            "loop {",
            "    $1",
            "}"
        ],
        "description": "loop {}"
    },
}
